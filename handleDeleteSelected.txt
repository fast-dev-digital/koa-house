  // Fun√ß√£o para deletar m√∫ltiplos alunos
  const handleDeleteSelected = async (selectedAlunos: Aluno[]) => {
    if (selectedAlunos.length === 0) return;

    // Confirmar a a√ß√£o
    const confirmMessage = `Tem certeza que deseja excluir ${selectedAlunos.length} aluno(s) selecionado(s)? Esta a√ß√£o n√£o pode ser desfeita.`;
    if (!window.confirm(confirmMessage)) return;

    setLoading(true);
    try {
      (`üóëÔ∏è Iniciando exclus√£o de ${selectedAlunos.length} alunos`);

      // Deletar todos os alunos selecionados do Firestore
      const deletePromises = selectedAlunos.map(aluno => 
        deleteDoc(doc(db, "Alunos", aluno.id))
      );
      
      await Promise.all(deletePromises);
      ('‚úÖ Todos os alunos foram removidos do Firestore');

      // Atualizar a lista local removendo os alunos exclu√≠dos
      const deletedIds = selectedAlunos.map(aluno => aluno.id);
      setAlunos(alunos.filter(aluno => !deletedIds.includes(aluno.id)));

      // Mostrar toast de sucesso
      showToastMessage(`${selectedAlunos.length} aluno(s) exclu√≠do(s) com sucesso!`, 'success');

    } catch (error) {
      console.error('‚ùå Erro ao excluir alunos:', error);
      showToastMessage('Erro ao excluir alguns alunos!', 'error');
    } finally {
      setLoading(false);
    }
  };
